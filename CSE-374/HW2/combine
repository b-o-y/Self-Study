#!/bin/bash
# Create a bash script combine that takes 2 or more arguments, call 
# them f1, f2, ..., fn. Script combine should work as follows:
#
# --> All arguments are treated as filenames.
# --> If fewer than two arguments are given, print a suitable error 
# message on stderr and exit with a return code of 1.
# --> If a file or directory f1 already exists, print "Error: first 
# file exists" on stderr and exit with a return code of 1.
# --> Otherwise concatenate the contents of f2, ..., fn and copy 
# them to stdout. Do not print any error messages from this (for 
# example if some file does not exist or is a directory). Instead, 
# any such error messages should be written to f1. Exit with a return 
# code of 0 after copying the files to stdout. 
#
# Restriction: You may not use the file names /dev/stdout or /dev/stderr. 
# These are not portable across *nix systems. Although they are found on 
# most versions of Linux the problem can be solved without them.
#
# Some information for my sake:
# https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators
# alias combine="/media/sf_prog/CSE374/hw2/combine"
# [3] https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators/159514#159514 
# Since the format of each concatenation wasn't specified,I just slap the contents of whatever is in the text file as is.

if [ "$#" -lt 3 ]
then
	echo "ERROR: combine requires more than two arguments" 1>&2
	exit 1
elif [ -e "$1" ]
then
	echo "ERROR: first file exists" 1>&2
	exit 1
else
	temp_file=$(mktemp) || { echo "Failed to create temporary file"; exit 1; }
	trap "rm -f $temp_file" 0 2 3 15 # so that when the script exits or is stopped with ctrl-C the file is still removed. â€“ wurtel
	cat ${@:2} >> $temp_file 2>> $1.txt # see [3] above
	echo "" >> $temp_file
	cat $temp_file
	rm -f ${temp_file}
fi
exit 0
	
	
