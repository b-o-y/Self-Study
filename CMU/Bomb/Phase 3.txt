NOTE TO MYSELF: DISP(BASE, INDEX, SCALE) (DISP + BASE + INDEX * SCALE)

Put a breakpoint at phase_3.
Dump of assembler code for function phase_3:
=> 0x0000000000400f43 <+0>:		sub    $0x18,%rsp
   0x0000000000400f47 <+4>:		lea    0xc(%rsp),%rcx
   0x0000000000400f4c <+9>:		lea    0x8(%rsp),%rdx
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi
   0x0000000000400f56 <+19>:	mov    $0x0,%eax
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f8a <+71>:	mov    $0x100,%eax
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f91 <+78>:	mov    $0x185,%eax
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f98 <+85>:	mov    $0xce,%eax
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq  

Looking at the values stored at the addresses in <+4> to <+14>:
(gdb) break *0x400f56

(gdb) print /x $rcx
$7 = 0x7fffffffe0dc
(gdb) x/s 0x7fffffffe0dc
0x7fffffffe0dc:	""
(gdb) print /x $rdx
$8 = 0x7fffffffe0d8
(gdb) x/s 0x7fffffffe0d8
0x7fffffffe0d8:	"\254\024@"
(gdb) x/s 0x4025cf
0x4025cf:	"%d %d"

0x4025cf is of interest because it's formatting for C's printf.

And just to make sure there's nothing else:
$ x/s 0x4025d0
0x4025d0:	"d %d"
$ x/s 0x4025d2
0x4025d2:	"%d"
(gdb) x/s 0x4025d4
0x4025d4:	""
$ x/s 0x4025d6
0x4025d6:	"rror: Premature EOF on stdin"

Looking at the addresses before I find:
(gdb) x/s 0x4025cb
0x4025cb:	" %d %d %d"
Continuing:
0x4025c9:	"%d %d %d %d"
(gdb) x/s 0x4025c8
0x4025c8:	" %d %d %d %d"
(gdb) x/s 0x4025c6
0x4025c6:	"%d %d %d %d %d"
(gdb) x/s 0x4025c3
0x4025c4:	"%d %d %d %d %d %d"
(gdb) x/s 0x4025c2
0x4025c2:	""
(gdb) x/s 0x4025c0
0x4025c0:	"p."

Could this mean that the passphrase is 6 numbers? Or is it only
two numbers given that's what is loaded into the register? Need to do
some more sleuthing.

If I assume only 3 numbers are used, I can try "1 1 1". I think this:
   0x0000000000400f56 <+19>:	mov    $0x0,%eax
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax
is just checking that there are more than 3 numbers for the passphrase. I tried
various test cases to prove this.

Now moving onto the jmp to <+39>:
=> 0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106> ;jump above.
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax
So lets see what happens if ja is executed:
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
ok, let's try to avoid that.

Let's see what the value of %rsp is:
(gdb) print /x $rsp
$1 = 0x7fffffffe0d0
(gdb) print /x *0x7fffffffe0d0
$2 = 0xffffe1d8
(gdb) print x/s *0x7fffffffe0d0
No symbol "x" in current context.
(gdb) x/s 0x7fffffffe0d0
0x7fffffffe0d0:	"\330\341\377\377\377\177"
(gdb) print /x *0xffffe1d8
Cannot access memory at address 0xffffe1d8

0x8(%rsp) means contents of memory at address stored at, %rsp + 8.
%rsp = 0xffffe1d8, therefore + 0x8 = 0xFFFFE1E0.
So, in two's complement that is -7712, or unsigned 4294959584. I don't
know if this has any significance, but I'll keep running.

=> 0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax

It then jumps to:
=> 0x0000000000400fb9 <+118>:	mov    $0x137,%eax
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>

There's another comparison with $rsp which is still:
(gdb) print /x *0x7fffffffe0d0
$5 = 0xffffe1d8
+0xC, gives 0xFFFFE1E4, in decimal 4294959588, in twos complement -7708.

And then it detonates. Lets review what I know so far:
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt> 
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax 				;Check that more than 3 numbers were inputted.
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>
=> 0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)			; RH value is 1.
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>	;Jumps if RH value > LH value
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax			;Move 1 into %eax.
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax			;0xc(%rsp) needs to what's %eax.
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
Something strange happens between <+118> and <+123>, because %eax contains 682 rather 311
at <+123>. The only thing I can think why this would be is the mov and cmp instructions
are of different data length, thus giving different numbers(?).

Anyways the pass phrase is: a number less than 7, 682, and then anything else. I used:
6 682 1



