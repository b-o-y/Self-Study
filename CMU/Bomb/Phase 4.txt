Put a break at phase_4 and see what we got:
=> 0x000000000040100c <+0>:		sub    $0x18,%rsp
   0x0000000000401010 <+4>:		lea    0xc(%rsp),%rcx
   0x0000000000401015 <+9>:		lea    0x8(%rsp),%rdx
   0x000000000040101a <+14>:	mov    $0x4025cf,%esi
   0x000000000040101f <+19>:	mov    $0x0,%eax
   0x0000000000401024 <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000401029 <+29>:	cmp    $0x2,%eax
   0x000000000040102c <+32>:	jne    0x401035 <phase_4+41>
   0x000000000040102e <+34>:	cmpl   $0xe,0x8(%rsp)
   0x0000000000401033 <+39>:	jbe    0x40103a <phase_4+46>
   0x0000000000401035 <+41>:	callq  0x40143a <explode_bomb>
   0x000000000040103a <+46>:	mov    $0xe,%edx
   0x000000000040103f <+51>:	mov    $0x0,%esi
   0x0000000000401044 <+56>:	mov    0x8(%rsp),%edi
   0x0000000000401048 <+60>:	callq  0x400fce <func4>
   0x000000000040104d <+65>:	test   %eax,%eax
   0x000000000040104f <+67>:	jne    0x401058 <phase_4+76>
   0x0000000000401051 <+69>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000401056 <+74>:	je     0x40105d <phase_4+81>
   0x0000000000401058 <+76>:	callq  0x40143a <explode_bomb>
   0x000000000040105d <+81>:	add    $0x18,%rsp
   0x0000000000401061 <+85>:	retq   

Beginning is similar to what I've already seen, let's see if there's a minimum arguments
requirement. Starting with the password with a string gave 0, 1 gave -1.

I can't figure it out, so I'm going to look at the rest of the program:
   0x000000000040102e <+34>:	cmpl   $0xe,0x8(%rsp)		 ; First argument should <= e.
   0x0000000000401033 <+39>:	jbe    0x40103a <phase_4+46> ;Jump if below or equal.
   0x000000000040103a <+46>:	mov    $0xe,%edx
   0x000000000040103f <+51>:	mov    $0x0,%esi
   0x0000000000401044 <+56>:	mov    0x8(%rsp),%edi		;Move first qrgument into %edi.
   0x0000000000401048 <+60>:	callq  0x400fce <func4>

Let's see what in func4:
=> 0x0000000000400fce <+0>:		sub    $0x8,%rsp
   0x0000000000400fd2 <+4>:		mov    %edx,%eax			;Move 0xe into %eax
   0x0000000000400fd4 <+6>:		sub    %esi,%eax			;%esi contains 0.
   0x0000000000400fd6 <+8>:		mov    %eax,%ecx			;Move 0xe into %ecx
   0x0000000000400fd8 <+10>:	shr    $0x1f,%ecx			;Shift right by 31 bits on ecx, now equals zero.
   0x0000000000400fdb <+13>:	add    %ecx,%eax			;Add zero to 0xe.
   0x0000000000400fdd <+15>:	sar    %eax					;shift arithmetic right by 1, somehow 7 now.
   0x0000000000400fdf <+17>:	lea    (%rax,%rsi,1),%ecx 	;%rax(0x7)+ 1*%rsi(0) = --> ecx = 7
   0x0000000000400fe2 <+20>:	cmp    %edi,%ecx			;Compare first argument (edi) to 7. 
   0x0000000000400fe4 <+22>:	jle    0x400ff2 <func4+36>	; if ecx <= edi, jmp.
   0x0000000000400fe6 <+24>:	lea    -0x1(%rcx),%edx		; rcx contains 7 (on first iteration), load %edx with 6.
   0x0000000000400fe9 <+27>:	callq  0x400fce <func4>		
   0x0000000000400fee <+32>:	add    %eax,%eax
   0x0000000000400ff0 <+34>:	jmp    0x401007 <func4+57>
   0x0000000000400ff2 <+36>:	mov    $0x0,%eax			; Going through this path, fails.
   0x0000000000400ff7 <+41>:	cmp    %edi,%ecx
   0x0000000000400ff9 <+43>:	jge    0x401007 <func4+57>	; If ecx <= edi, then we can finish this program.
   0x0000000000400ffb <+45>:	lea    0x1(%rcx),%esi
   0x0000000000400ffe <+48>:	callq  0x400fce <func4>
   0x0000000000401003 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401007 <+57>:	add    $0x8,%rsp
   0x000000000040100b <+61>:	retq 
It looks like to avoid looping, we can just make the first argument 7. We'll see if that passes <+65>.
This indeed does satisty the TEST instruction.
 
Now moving on:
   0x0000000000401051 <+69>:	cmpl   $0x0,0xc(%rsp)			;0xc(%rsp) must equal 0x0 to avoid explosion.
   0x0000000000401056 <+74>:	je     0x40105d <phase_4+81>
   0x0000000000401058 <+76>:	callq  0x40143a <explode_bomb>
   0x000000000040105d <+81>:	add    $0x18,%rsp
   0x0000000000401061 <+85>:	retq   
$rsp = 0x7fffffffe0d0
(gdb) print /x *0x7fffffffe0dc
$82 = 0x16
0x16 in decimal is 22, the second argument that I've been using for my test passcode. Let's make it zero,
and see if it works.

After testing, the third value is just a garbage value, but required for the first test: 
7 0 (and any number, I suppose, I did not test it extensively other than using 1 and 19 which both worked.)